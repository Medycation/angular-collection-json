// Generated by CoffeeScript 1.6.2
(function() {
  var data, _, _data;

  _ = require("underscore");

  _data = [
    {
      _id: "task1",
      description: "This is my first task.",
      completed: false,
      dateCreated: "2011-06-01",
      dateDue: "2011-12-31"
    }, {
      _id: "task2",
      description: "This is my second task.",
      completed: true,
      dateCreated: "2011-06-01",
      dateDue: "2011-12-29"
    }, {
      _id: "task3",
      description: "This is my third task.",
      completed: false,
      dateCreated: "2011-06-01",
      dateDue: "2011-11-30"
    }
  ];

  data = _.clone(_data);

  module.exports = {
    get: function(view, options, done) {
      if (typeof options === "function") {
        done = options;
        options = {};
      }
      switch (view) {
        case "/_design/example/_view/all":
          return done(null, data);
        case "/_design/example/_view/open":
          return done(null, _.filter(data, function(task) {
            return (task.description != null) && (task.dateCreated != null) && (task.dateDue != null) && task.completed === false;
          }));
        case "/_design/example/_view/closed":
          return done(null, _.filter(data, function(task) {
            return (task.description != null) && (task.dateCreated != null) && (task.dateDue != null) && task.completed === true;
          }));
        case "/_design/example/_view/due_date":
          return done(null, _.filter(data, function(task) {
            var due, end, start;

            due = new Date(task.dateDue);
            start = due > (options.startDate ? new Date(options.startDate) : 0);
            end = due < (options.endDate ? new Date(options.endDate) : 9999999999999999);
            return start && end;
          }));
        default:
          return done(null, _.find(data, function(task) {
            return task._id === view;
          }));
      }
    },
    save: function(doc, done) {
      doc._id = "task" + (data.length + 1);
      data.push(doc);
      return done(null, doc);
    },
    update: function(id, doc, done) {
      var item, key, value;

      item = _.find(data, function(item) {
        return item._id === id;
      });
      if (!item) {
        return done(new Error("Item not found"));
      }
      for (key in doc) {
        value = doc[key];
        item[key] = value;
      }
      return done(null, item);
    },
    remove: function(id, done) {
      var removed;

      removed = false;
      data = _.filter(data, function(item) {
        var keep;

        keep = item._id !== id;
        removed = !removed && !keep;
        return keep;
      });
      if (!removed) {
        return done(new Error("Item " + id + " not found"));
      }
      return done(null);
    },
    reset: function() {
      return data = _.clone(_data);
    },
    _data: data
  };

}).call(this);
