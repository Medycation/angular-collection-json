// Generated by CoffeeScript 1.6.2
/*
Module dependencies.
*/


(function() {
  var addTask, app, contentType, db, express, host, port, site, today;

  express = require("express");

  app = module.exports = express();

  db = require("./fixtures/db");

  contentType = "application/json";

  module.exports.host = host = "http://localhost:3000";

  module.exports.site = site = "" + host + "/collection/tasks";

  app.configure(function() {
    this.set("views", __dirname + "/views");
    this.set("view engine", "cscj");
    this.use(function(req, res, next) {
      res.header("Access-Control-Allow-Origin", "*");
      res.header("Access-Control-Allow-Headers", "X-Requested-With, X-SessionID, X-UserID");
      if (req.method === 'OPTIONS') {
        return res.send(200);
      } else {
        return next();
      }
    });
    this.use(function(req, res, next) {
      var buf;

      if (req.get("content-type") === "application/vnd.collection+json") {
        buf = "";
        req.on("data", function(chunk) {
          return buf += chunk;
        });
        return req.on("end", function() {
          var e;

          try {
            req.body = JSON.parse(buf);
            return next();
          } catch (_error) {
            e = _error;
            e.body = buf;
            e.status = 400;
            return next(e);
          }
        });
      } else {
        return next();
      }
    });
    this.use(express.methodOverride());
    this.use(this.router);
    this.locals.site = site;
    this.locals.queries = function(collection) {
      collection.query(function() {
        this.rel("all");
        this.href("" + site + "/;all");
        return this.prompt("All tasks");
      });
      collection.query(function() {
        this.rel("open");
        this.href("" + site + "/;open");
        return this.prompt("Open tasks");
      });
      collection.query(function() {
        this.rel("closed");
        this.href("" + site + "/;closed");
        return this.prompt("Closed tasks");
      });
      return collection.query(function() {
        this.rel("date-range");
        this.href("" + site + "/;date-range");
        this.prompt("Date Range");
        this.datum({
          name: "date-start",
          value: "",
          prompt: "Start Date"
        });
        return this.datum({
          name: "date-stop",
          value: "",
          prompt: "Stop Date"
        });
      });
    };
    this.locals.template = function(collection) {
      return collection.template(function() {
        this.datum({
          name: "description",
          value: "",
          prompt: "Description"
        });
        this.datum({
          name: "dateDue",
          value: "",
          prompt: "Date Due (yyyy-mm-dd)"
        });
        return this.datum({
          name: "completed",
          value: "",
          prompt: "Completed (true/false)?"
        });
      });
    };
    return this.locals.links = function(collection) {
      collection.link({
        rel: "author",
        href: "mailto:mamund@yahoo.com",
        prompt: "Author"
      });
      collection.link({
        rel: "profile",
        href: "http://amundsen.com/media-types/collection/profiles/tasks/",
        prompt: "Profile"
      });
      collection.link({
        rel: "queries",
        href: "" + site + "/;queries",
        prompt: "Queries"
      });
      return collection.link({
        rel: "template",
        href: "" + site + "/;template",
        prompt: "Template"
      });
    };
  });

  app.configure("development", function() {
    return this.use(function(error, req, res, next) {
      var collection, status;

      console.error(error);
      status = error.status || 500;
      collection = {
        collection: {
          version: "1.0",
          href: "" + host + req.url,
          error: {
            code: status,
            title: error.message,
            message: error.stack
          },
          links: []
        }
      };
      return res.send(status, collection);
    });
  });

  app.configure("production", function() {
    return app.use(express.errorHandler());
  });

  app.get("/collection/tasks", function(req, res, next) {
    var view;

    view = "/_design/example/_view/due_date";
    return db.get(view, function(err, doc) {
      if (err) {
        return next(err);
      }
      res.set("content-type", contentType);
      return res.render("tasks", {
        href: site,
        tasks: doc
      });
    });
  });

  app.get("/collection/tasks/;queries", function(req, res) {
    res.set("content-type", contentType);
    return res.render("queries", {
      href: "" + site + "/;queries"
    });
  });

  app.get("/collection/tasks/;template", function(req, res) {
    res.set("content-type", contentType);
    return res.render("template", {
      href: "" + site + "/;template"
    });
  });

  app.get("/collection/tasks/;all", function(req, res, next) {
    var view;

    view = "/_design/example/_view/all";
    return db.get(view, function(err, doc) {
      if (err) {
        return next(err);
      }
      res.set("content-type", contentType);
      return res.render("tasks", {
        href: "" + site + "/;all",
        tasks: doc
      });
    });
  });

  app.get("/collection/tasks/;open", function(req, res, next) {
    var view;

    view = "/_design/example/_view/open";
    return db.get(view, function(err, doc) {
      if (err) {
        return next(err);
      }
      res.set("content-type", contentType);
      return res.render("tasks", {
        href: "" + site + "/;open",
        tasks: doc
      });
    });
  });

  app.get("/collection/tasks/;closed", function(req, res, next) {
    var view;

    view = "/_design/example/_view/closed";
    return db.get(view, function(err, doc) {
      if (err) {
        return next(err);
      }
      res.set("content-type", contentType);
      return res.render("tasks", {
        href: "" + site + "/;closed",
        tasks: doc
      });
    });
  });

  app.get("/collection/tasks/;date-range", function(req, res, next) {
    var options, view;

    options = {
      startDate: req.query["date-start"],
      endDate: req.query["date-stop"]
    };
    view = "/_design/example/_view/due_date";
    return db.get(view, options, function(err, doc) {
      if (err) {
        return next(err);
      }
      res.set("content-type", contentType);
      return res.render("tasks", {
        href: "" + site + "/;date-range?date-start=" + options.startDate + "&date-stop=" + options.endDate,
        tasks: doc
      });
    });
  });

  app.get("/collection/tasks/:i", function(req, res, next) {
    var view;

    view = req.params.i;
    return db.get(view, function(err, doc) {
      if (err) {
        return next(err);
      }
      res.set("content-type", contentType);
      res.set("etag", doc._rev);
      return res.render("tasks", {
        href: "" + site + "/" + view,
        tasks: [doc]
      });
    });
  });

  addTask = function(req, res, next) {
    var completed, data, dateDue, description, i, item, x;

    description = void 0;
    completed = void 0;
    dateDue = void 0;
    data = req.body.template.data;
    i = 0;
    x = data.length;
    while (i < x) {
      switch (data[i].name) {
        case "description":
          description = data[i].value;
          break;
        case "completed":
          completed = data[i].value;
          break;
        case "dateDue":
          dateDue = data[i].value;
      }
      i++;
    }
    item = {};
    item.description = description;
    item.completed = completed;
    item.dateDue = dateDue;
    item.dateCreated = today();
    return db.save(item, function(err, doc) {
      if (err) {
        err.status = 400;
        return next(err);
      } else {
        return res.redirect(303, site);
      }
    });
  };

  app.post("/collection/tasks", addTask);

  app.post("/collection/tasks/;template", addTask);

  app.post("/collection/tasks/;all", addTask);

  app.post("/collection/tasks/;closed", addTask);

  app.post("/collection/tasks/;open", addTask);

  app.post("/collection/tasks/;date-range", addTask);

  app.put("/collection/tasks/:i", function(req, res, next) {
    var completed, data, dateDue, description, i, idx, item, x;

    idx = req.params.i || "";
    description = void 0;
    completed = void 0;
    dateDue = void 0;
    data = req.body.template.data;
    i = 0;
    x = data.length;
    while (i < x) {
      switch (data[i].name) {
        case "description":
          description = data[i].value;
          break;
        case "completed":
          completed = data[i].value;
          break;
        case "dateDue":
          dateDue = data[i].value;
      }
      i++;
    }
    item = {};
    item.description = description;
    item.completed = completed;
    item.dateDue = dateDue;
    item.dateCreated = today();
    return db.update(idx, item, function(err, doc) {
      if (err) {
        err.status = 400;
        return next(err);
      } else {
        return res.redirect(303, "" + site + "/collection/tasks/" + idx);
      }
    });
  });

  app["delete"]("/collection/tasks/:i", function(req, res, next) {
    var idx;

    idx = req.params.i || "";
    return db.remove(idx, function(err, doc) {
      if (err) {
        err.status = 400;
        return next(err);
      } else {
        res.status = 204;
        return res.send();
      }
    });
  });

  today = function() {
    var d, dt, m, y;

    y = void 0;
    m = void 0;
    d = void 0;
    dt = void 0;
    dt = new Date();
    y = dt.getFullYear();
    m = dt.getMonth() + 1;
    if (m.length === 1) {
      m = "0" + m;
    }
    d = dt.getDate();
    if (d.length === 1) {
      d = "0" + d;
    }
    return y + "-" + m + "-" + d;
  };

  if (!module.parent) {
    port = 3000;
    app.listen(port);
    console.log("Express server listening on port %d", port);
  }

}).call(this);
