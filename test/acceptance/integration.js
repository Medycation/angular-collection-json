// Generated by CoffeeScript 1.6.2
(function() {
  var cj, should;

  should = require("should");

  cj = require("../..");

  describe("Integration", function() {
    var app, db, root, rootCollection, server;

    app = require("./collection/app");
    db = require("./collection/fixtures/db");
    root = app.site;
    server = null;
    before(function(done) {
      return server = app.listen(3000, function() {
        return done();
      });
    });
    after(function(done) {
      return server.close(function() {
        return done();
      });
    });
    rootCollection = void 0;
    beforeEach(function(done) {
      return cj(root, function(error, collection) {
        if (error) {
          throw error;
        }
        should.exist(collection, "No root collection was returned");
        rootCollection = collection;
        return done();
      });
    });
    describe("Original", function() {
      it("should have an href", function() {
        return rootCollection.href.should.equal(root);
      });
      it("should have links", function() {
        should.exist(rootCollection.link("queries"), "'queries' links were found");
        return should.exist(rootCollection.link("template"), "'template' link were found");
      });
      it("should follow a link from the root", function(done) {
        return rootCollection.link("queries").follow(function(error, queriesCol) {
          if (error) {
            throw error;
          }
          should.exist(queriesCol, "No collection was returned");
          should.exist(queriesCol.query("all"), "'all' query is not defined");
          should.exist(queriesCol.query("open"), "'open' query is not defined");
          should.exist(queriesCol.query("closed"), "'closed' query is not defined");
          should.exist(queriesCol.query("date-range"), "'date-range' query is not defined");
          return done();
        });
      });
      it("should submit a query", function(done) {
        var query;

        query = rootCollection.query("date-range");
        query.set("date-start", "2011-12-01");
        return query.submit(function(error, filteredCol) {
          if (error) {
            throw error;
          }
          filteredCol.items.length.should.equal(2);
          return done();
        });
      });
      it("should return some items", function(done) {
        return rootCollection.query("all").submit(function(error, itemsCol) {
          var i, item, _i, _ref;

          if (error) {
            throw error;
          }
          should.exist(itemsCol, "No collection was returned");
          should.exist(itemsCol.items, "No items were returned in the collection");
          itemsCol.items.length.should.equal(db._data.length);
          for (i = _i = 0, _ref = db._data.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            should.exist(itemsCol.items[i], "Item was not return when requested by index: " + i);
            item = itemsCol.items[i];
            should.exist(item.datum("description"), "Item should have a description");
            should.exist(item.datum("completed"), "Item should have a completed property");
            should.exist(item.datum("dateDue"), "Item should have a dateDue");
            item.get("description").should.equal(db._data[i].description);
            item.get("completed").should.equal(db._data[i].completed);
            item.get("dateDue").should.equal(db._data[i].dateDue);
          }
          return done();
        });
      });
      it("should be able to add an item", function(done) {
        return rootCollection.link("template").follow(function(error, templateCol) {
          var expectedLength, template;

          if (error) {
            throw error;
          }
          template = templateCol.template();
          template.set("description", "This is a test");
          template.set("dueDate", "2012-10-06");
          template.set("completed", false);
          expectedLength = db._data.length + 1;
          return template.submit(function(error) {
            if (error) {
              throw error;
            }
            db._data.length.should.equal(expectedLength);
            return rootCollection.query("all").submit(function(error, itemsCol) {
              itemsCol.items.length.should.equal(expectedLength);
              return done();
            });
          });
        });
      });
      it("should edit an item");
      return it("should follow an item's link");
    });
    return describe("Extensions", function() {
      return it("should validate client input");
    });
  });

}).call(this);
