// Generated by CoffeeScript 1.6.2
(function() {
  describe("Attributes", function() {
    var cj;

    cj = null;
    beforeEach(module('Collection'));
    beforeEach(inject(function(_cj_) {
      return cj = _cj_;
    }));
    describe("[Original](http://amundsen.com/media-types/collection/)", function() {
      var collection, data, errorData;

      collection = data = errorData = null;
      beforeEach(inject(function(cjOriginal, cjError) {
        data = cjOriginal;
        return errorData = cjError;
      }));
      beforeEach(function() {
        return cj.parse(data, function(error, _collection) {
          if (error) {
            throw error;
          }
          return collection = _collection;
        });
      });
      describe("[collection](http://amundsen.com/media-types/collection/format/#objects-collection)", function() {
        it("should have a version", function() {
          return expect(collection.version()).toEqual(data.collection.version);
        });
        it("should have an href", function() {
          return expect(collection.href()).toEqual(data.collection.href);
        });
        it("should throw an exception with a bad version number", function() {
          return cj.parse({
            collection: {
              version: "1.1"
            }
          }, function(error, col) {
            return expect(error).toBeDefined("No error was returned");
          });
        });
        return it("should throw an exception with a malformed collection", function() {
          return cj.parse({
            version: "1.1"
          }, function(error, col) {
            return expect(error).toBeDefined("No error was returned");
          });
        });
      });
      describe("[error](http://amundsen.com/media-types/collection/format/#objects-error)", function() {
        return it("should have an error", function() {
          return cj.parse(errorData, function(error, errorCol) {
            expect(error).toBeDefined("An error was not returned");
            expect(errorCol).toBeDefined("The collection with the error was not returned");
            expect(error.title).toEqual(errorData.collection.error.title);
            expect(error.code).toEqual(errorData.collection.error.code);
            expect(error.message).toEqual(errorData.collection.error.message);
            expect(errorCol.error.title).toEqual(errorData.collection.error.title);
            expect(errorCol.error.code).toEqual(errorData.collection.error.code);
            return expect(errorCol.error.message).toEqual(errorData.collection.error.message);
          });
        });
      });
      describe("[template](http://amundsen.com/media-types/collection/format/#objects-template)", function() {
        it("should iterate properties template", function() {
          var key, orig, template, value, _ref, _results;

          template = collection.template();
          _ref = template.form;
          _results = [];
          for (key in _ref) {
            value = _ref[key];
            orig = _.find(data.collection.template.data, function(datum) {
              return datum.name === key;
            });
            expect(key).toEqual(orig.name);
            expect(value).toEqual(orig.value);
            _results.push(expect(template.promptFor(key)).toEqual(orig.prompt));
          }
          return _results;
        });
        it("should be able to set values", function() {
          var avatar, blog, email, name, newItem;

          newItem = collection.template();
          name = "Joe Test";
          email = "test@test.com";
          blog = "joe.blogger.com";
          avatar = "http://www.gravatar.com/avatar/dafd213c94afdd64f9dc4fa92f9710ea?s=512";
          newItem.set("full-name", name);
          newItem.set("email", email);
          newItem.set("blog", blog);
          newItem.set("avatar", avatar);
          expect(newItem.get("full-name")).toEqual(name);
          expect(newItem.get("email")).toEqual(email);
          expect(newItem.get("blog")).toEqual(blog);
          return expect(newItem.get("avatar")).toEqual(avatar);
        });
        return it("should return a datum given a name", function() {
          var fullName, newItem;

          newItem = collection.template();
          fullName = newItem.datum("full-name");
          expect(fullName.name).toEqual("full-name");
          expect(fullName.prompt).toEqual("Full Name");
          return expect(fullName.value).toEqual("Joe");
        });
      });
      describe("[items](http://amundsen.com/media-types/collection/format/#arrays-items)", function() {
        it("should iterate items", function() {
          var idx, item, orig, _ref, _results;

          _ref = collection.items;
          _results = [];
          for (idx in _ref) {
            item = _ref[idx];
            orig = data.collection.items[idx];
            _results.push(expect(item.href).toEqual(orig.href));
          }
          return _results;
        });
        return it("should get a value", function() {
          var datum, idx, item, itemDatum, orig, _ref, _results;

          _ref = collection.items;
          _results = [];
          for (idx in _ref) {
            item = _ref[idx];
            orig = data.collection.items[idx];
            _results.push((function() {
              var _i, _len, _ref1, _results1;

              _ref1 = orig.data;
              _results1 = [];
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                datum = _ref1[_i];
                itemDatum = item.get(datum.name);
                expect(itemDatum).toBeDefined("Item does not have " + datum.name);
                _results1.push(expect(itemDatum).toEqual(datum.value));
              }
              return _results1;
            })());
          }
          return _results;
        });
      });
      describe("[queries](http://amundsen.com/media-types/collection/format/#arrays-queries)", function() {
        it("should iterate queries", function() {
          var orig, query, _i, _len, _ref, _results;

          _ref = collection.queries;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            query = _ref[_i];
            orig = _.find(data.collection.queries, function(_query) {
              return _query.rel === query.rel;
            });
            expect(query.href).toEqual(orig.href);
            expect(query.rel).toEqual(orig.rel);
            _results.push(expect(query.prompt).toEqual(orig.prompt));
          }
          return _results;
        });
        it("should be able to set values", function() {
          var searchQuery;

          searchQuery = collection.query("search");
          searchQuery.set("search", "Testing");
          return expect(searchQuery.get("search")).toEqual("Testing");
        });
        return it("should get a query by rel", function() {
          var orig, searchQuery, _i, _len, _ref, _results;

          _ref = data.collection.queries;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            orig = _ref[_i];
            searchQuery = collection.query(orig.rel);
            expect(searchQuery.href()).toEqual(orig.href);
            expect(searchQuery.rel()).toEqual(orig.rel);
            _results.push(expect(searchQuery.prompt()).toEqual(orig.prompt));
          }
          return _results;
        });
      });
      return describe("[links](http://amundsen.com/media-types/collection/format/#arrays-links)", function() {
        it("should get iterate the links", function() {
          var link, orig, _i, _len, _ref, _results;

          _ref = collection.links;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            link = _ref[_i];
            orig = _.find(data.collection.links, function(_link) {
              return _link.rel === link.rel;
            });
            expect(link.href).toEqual(orig.href);
            expect(link.rel).toEqual(orig.rel);
            _results.push(expect(link.prompt).toEqual(orig.prompt));
          }
          return _results;
        });
        return it("should get a link by rel", function() {
          var link, orig, _i, _len, _ref, _results;

          _ref = data.collection.links;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            orig = _ref[_i];
            link = collection.link(orig.rel);
            expect(link.href()).toEqual(orig.href);
            expect(link.rel()).toEqual(orig.rel);
            _results.push(expect(link.prompt()).toEqual(orig.prompt));
          }
          return _results;
        });
      });
    });
    return describe("[Extensions](https://github.com/mamund/collection-json/tree/master/extensions)", function() {
      describe("[errors](https://github.com/mamund/collection-json/blob/master/extensions/errors.md)", function() {
        return it("need tests");
      });
      describe("[inline](https://github.com/mamund/collection-json/blob/master/extensions/inline.md)", function() {
        return it("need tests");
      });
      describe("[model](https://github.com/mamund/collection-json/blob/master/extensions/model.md)", function() {
        return it("need tests");
      });
      describe("[template-validation](https://github.com/mamund/collection-json/blob/master/extensions/template-validation.md)", function() {
        return it("need tests");
      });
      describe("[templates](https://github.com/mamund/collection-json/blob/master/extensions/templates.md)", function() {
        return it("need tests");
      });
      describe("[uri-templates](https://github.com/mamund/collection-json/blob/master/extensions/uri-templates.md)", function() {
        return it("need tests");
      });
      return describe("[value-types](https://github.com/mamund/collection-json/blob/master/extensions/value-types.md)", function() {
        return it("need tests");
      });
    });
  });

}).call(this);
